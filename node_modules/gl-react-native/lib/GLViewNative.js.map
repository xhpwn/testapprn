{"version":3,"sources":["../src/GLViewNative.js"],"names":["propTypes","onContextCreate","func","isRequired","onContextFailure","style","any","GLViewNative","gl","rngl","getExtension","flush","endFrame","props","children","rest","__DEV__","console","warn","position","overflow","flex","top","left","opacity"],"mappings":";;;;;;;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;;;;;;;AAEA,IAAMA,YAAY;AAChBC,mBAAiB,oBAAUC,IAAV,CAAeC,UADhB;AAEhBC,oBAAkB,oBAAUF,IAAV,CAAeC,UAFjB;AAGhBE,SAAO,oBAAUC;AAHD,CAAlB;;IAMqBC,Y;;;;;;;;;;;8BASTC,E,EAA2B;AACnC,UAAMC,OAAOD,GAAGE,YAAH,CAAgB,IAAhB,CAAb;AACAF,SAAGG,KAAH;AACAF,WAAKG,QAAL;AACD;;;6BAEQ;AAAA,mBAOH,KAAKC,KAPF;AAAA,UAELR,KAFK,UAELA,KAFK;AAAA,UAGLJ,eAHK,UAGLA,eAHK;AAAA,UAILG,gBAJK,UAILA,gBAJK;AAAA,UAKLU,QALK,UAKLA,QALK;AAAA,UAMFC,IANE;;AAQP,UAAIC,OAAJ,EAAa;AACX,YAAI,WAAWD,IAAX,IAAmB,YAAYA,IAAnC,EAAyC;AACvCE,kBAAQC,IAAR,CACE,8GADF;AAGD;AACF;AACD,aACE;AAAA;AAAA,qBACMH,IADN;AAEE,iBAAO,CAAC,EAAEI,UAAU,UAAZ,EAAwBC,UAAU,QAAlC,EAAD,EAA+Cf,KAA/C;AAFT;AAIE;AACE,iBAAO,CACLA,KADK,EAEL;AACEgB,kBAAM,CADR;AAEEF,sBAAU,UAFZ;AAGEG,iBAAK,CAHP;AAIEC,kBAAM;AAJR,WAFK,CADT;AAUE,2BAAiBtB,eAVnB;AAWE,4BAAkBG;AAXpB,UAJF;AAiBE;AAAA;AAAA,YAAM,OAAO,EAAEoB,SAAS,CAAX,EAAb;AACGV;AADH;AAjBF,OADF;AAuBD;;;;;;AArDkBP,Y,CAOZP,S,GAAYA,S;kBAPAO,Y","file":"GLViewNative.js","sourcesContent":["//@flow\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { View } from \"react-native\";\nimport { WebGLView } from \"react-native-webgl\";\n\nconst propTypes = {\n  onContextCreate: PropTypes.func.isRequired,\n  onContextFailure: PropTypes.func.isRequired,\n  style: PropTypes.any\n};\n\nexport default class GLViewNative extends Component {\n  props: {\n    onContextCreate: (gl: WebGLRenderingContext) => void,\n    onContextFailure: (e: Error) => void,\n    style?: any,\n    children?: any\n  };\n  static propTypes = propTypes;\n\n  afterDraw(gl: WebGLRenderingContext) {\n    const rngl = gl.getExtension(\"RN\");\n    gl.flush();\n    rngl.endFrame();\n  }\n\n  render() {\n    const {\n      style,\n      onContextCreate,\n      onContextFailure,\n      children,\n      ...rest\n    } = this.props;\n    if (__DEV__) {\n      if (\"width\" in rest || \"height\" in rest) {\n        console.warn(\n          \"gl-react-native <Surface>: no such width/height prop. instead you must use the style prop like for a <View>.\"\n        );\n      }\n    }\n    return (\n      <View\n        {...rest}\n        style={[{ position: \"relative\", overflow: \"hidden\" }, style]}\n      >\n        <WebGLView\n          style={[\n            style,\n            {\n              flex: 1,\n              position: \"absolute\",\n              top: 0,\n              left: 0\n            }\n          ]}\n          onContextCreate={onContextCreate}\n          onContextFailure={onContextFailure}\n        />\n        <View style={{ opacity: 0 }}>\n          {children}\n        </View>\n      </View>\n    );\n  }\n}\n"]}