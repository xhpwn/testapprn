{"version":3,"sources":["../src/ImageSourceTextureLoader.js"],"names":["imageSourceHash","imageSource","uri","Error","ImageSourceTextureLoader","loads","Map","textureAssets","forEach","d","dispose","clear","gl","rngl","getExtension","texture","unloadTexture","input","hash","load","get","ignored","promise","loadTexture","yflip","image","then","set","data","asset","width","height"],"mappings":";;;;;;;;;;AACA;;;;;;;;AAOA,SAASA,eAAT,CAAyBC,WAAzB,EAAoE;AAClE,MAAI,OAAOA,WAAP,KAAuB,QAA3B,EAAqC,OAAOA,WAAP;AAD6B,MAE1DC,GAF0D,GAElDD,WAFkD,CAE1DC,GAF0D;;AAGlE,MAAI,CAACA,GAAL,EAAU;AACR,UAAM,IAAIC,KAAJ,CACJ,8DADI,CAAN;AAGD;AACD,SAAOD,GAAP;AACD;;IAEoBE,wB;;;;;;;;;;;;;;0NAGnBC,K,GAAiD,IAAIC,GAAJ,E,QACjDC,a,GAA+B,IAAID,GAAJ,E;;;;;8BACrB;AACR,WAAKD,KAAL,CAAWG,OAAX,CAAmB,aAAK;AACtBC,UAAEC,OAAF;AACD,OAFD;AAGA,WAAKL,KAAL,CAAWM,KAAX;AAJQ,UAKAC,EALA,GAKO,IALP,CAKAA,EALA;;AAMR,UAAMC,OAAOD,GAAGE,YAAH,CAAgB,IAAhB,CAAb;AACA,WAAKP,aAAL,CAAmBC,OAAnB,CAA2B,iBAAiB;AAAA,YAAdO,OAAc,SAAdA,OAAc;;AAC1CF,aAAKG,aAAL,CAAmBD,OAAnB;AACD,OAFD;AAGA,WAAKR,aAAL,CAAmBI,KAAnB;AACD;;;4BAEOM,K,EAAY;AAClB,aACE,OAAOA,KAAP,KAAiB,QAAjB,IACCA,SAAS,QAAOA,KAAP,yCAAOA,KAAP,OAAiB,QAA1B,IAAsC,OAAOA,MAAMf,GAAb,KAAqB,QAF9D;AAID;;;yBAEID,W,EAAgD;AAAA;;AACnD,UAAMiB,OAAOlB,gBAAgBC,WAAhB,CAAb;AACA,UAAMkB,OAAO,KAAKd,KAAL,CAAWe,GAAX,CAAeF,IAAf,CAAb;AACA,UAAIC,IAAJ,EAAU,OAAOA,IAAP;AACV,UAAIE,UAAU,KAAd;AACA,UAAIX,UAAU,SAAVA,OAAU,GAAM;AAClBW,kBAAU,IAAV;AACD,OAFD;AAGA,UAAMC,UAAU,KAAKV,EAAL,CACbE,YADa,CACA,IADA,EAEbS,WAFa,CAED,EAAEC,OAAO,IAAT,EAAeC,OAAOxB,WAAtB,EAFC,EAGbyB,IAHa,CAGR,gBAAQ;AACZ,eAAKnB,aAAL,CAAmBoB,GAAnB,CAAuBT,IAAvB,EAA6BU,IAA7B;AACA,eAAOA,KAAKb,OAAZ;AACD,OANa,CAAhB;AAOA,UAAMN,IAAI,EAAEC,gBAAF,EAAWY,gBAAX,EAAV;AACA,WAAKjB,KAAL,CAAWsB,GAAX,CAAeT,IAAf,EAAqBT,CAArB;AACA,aAAOA,CAAP;AACD;;;wBACGR,W,EAA0B;AAC5B,UAAM4B,QAAQ,KAAKtB,aAAL,CAAmBa,GAAnB,CAAuBpB,gBAAgBC,WAAhB,CAAvB,CAAd;AACA,aAAO4B,SAASA,MAAMd,OAAtB;AACD;;;4BACOd,W,EAA0B;AAChC,UAAM4B,QAAQ,KAAKtB,aAAL,CAAmBa,GAAnB,CAAuBpB,gBAAgBC,WAAhB,CAAvB,CAAd;AACA,UAAI,CAAC4B,KAAL,EAAY;AACZ,aAAO,CAACA,MAAMC,KAAP,EAAcD,MAAME,MAApB,CAAP;AACD;;;;;;kBApDkB3B,wB","file":"ImageSourceTextureLoader.js","sourcesContent":["//@flow\nimport { TextureLoader } from \"gl-react\";\nimport type { DisposablePromise } from \"gl-react/lib/helpers/disposable\";\n\ntype ImageSource = Object | \"number\";\ntype ImageSourceHash = string | number;\ntype Asset = { texture: WebGLTexture, width: number, height: number };\n\nfunction imageSourceHash(imageSource: ImageSource): ImageSourceHash {\n  if (typeof imageSource === \"number\") return imageSource;\n  const { uri } = imageSource;\n  if (!uri) {\n    throw new Error(\n      \"GLImages: unsupported imageSource: {uri} needs to be defined\"\n    );\n  }\n  return uri;\n}\n\nexport default class ImageSourceTextureLoader extends TextureLoader<\n  ImageSource\n> {\n  loads: Map<*, DisposablePromise<WebGLTexture>> = new Map();\n  textureAssets: Map<*, Asset> = new Map();\n  dispose() {\n    this.loads.forEach(d => {\n      d.dispose();\n    });\n    this.loads.clear();\n    const { gl } = this;\n    const rngl = gl.getExtension(\"RN\");\n    this.textureAssets.forEach(({ texture }) => {\n      rngl.unloadTexture(texture);\n    });\n    this.textureAssets.clear();\n  }\n\n  canLoad(input: any) {\n    return (\n      typeof input === \"number\" ||\n      (input && typeof input === \"object\" && typeof input.uri === \"string\")\n    );\n  }\n\n  load(imageSource: ImageSource): DisposablePromise<*> {\n    const hash = imageSourceHash(imageSource);\n    const load = this.loads.get(hash);\n    if (load) return load;\n    let ignored = false;\n    let dispose = () => {\n      ignored = true;\n    };\n    const promise = this.gl\n      .getExtension(\"RN\")\n      .loadTexture({ yflip: true, image: imageSource })\n      .then(data => {\n        this.textureAssets.set(hash, data);\n        return data.texture;\n      });\n    const d = { dispose, promise };\n    this.loads.set(hash, d);\n    return d;\n  }\n  get(imageSource: ImageSource) {\n    const asset = this.textureAssets.get(imageSourceHash(imageSource));\n    return asset && asset.texture;\n  }\n  getSize(imageSource: ImageSource) {\n    const asset = this.textureAssets.get(imageSourceHash(imageSource));\n    if (!asset) return;\n    return [asset.width, asset.height];\n  }\n}\n"]}